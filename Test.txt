-- Custom Blood-Themed UI Library
local BloodUI = {}
BloodUI.__index = BloodUI

-- Configuration
local config = {
    MainColor = Color3.fromRGB(140, 0, 0),
    SecondaryColor = Color3.fromRGB(90, 0, 0),
    TextColor = Color3.fromRGB(255, 255, 255),
    AccentColor = Color3.fromRGB(255, 50, 50),
    BackgroundImage = "rbxassetid://122545428580310",
    BackgroundTransparency = 0.6,
    ToggleIcon = "rbxassetid://122545428580310",
    CornerRadius = UDim.new(0, 12),
    StrokeThickness = 2,
    AnimationSpeed = 0.2
}

-- Tweening function
local function tween(object, properties, duration, style, direction, callback)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        style or Enum.EasingStyle.Quad,
        direction or Enum.EasingDirection.Out
    )
    local tween = game:GetService("TweenService"):Create(object, tweenInfo, properties)
    tween:Play()
    if callback then
        tween.Completed:Connect(callback)
    end
    return tween
end

-- Create a new window
function BloodUI:CreateWindow(options)
    local window = setmetatable({}, BloodUI)
    window.title = options.Title or "Blood UI"
    window.size = options.Size or UDim2.fromOffset(500, 400)
    window.tabs = {}
    window.currentTab = nil
    window.visible = true
    
    -- Main screen GUI
    window.screenGui = Instance.new("ScreenGui")
    window.screenGui.Name = "BloodUI"
    window.screenGui.ResetOnSpawn = false
    window.screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    window.screenGui.Parent = game:GetService("CoreGui")
    
    -- Background frame
    window.mainFrame = Instance.new("Frame")
    window.mainFrame.Name = "MainFrame"
    window.mainFrame.Size = window.size
    window.mainFrame.Position = UDim2.fromScale(0.5, 0.5)
    window.mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    window.mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    window.mainFrame.BackgroundTransparency = 0.2
    window.mainFrame.BorderSizePixel = 0
    window.mainFrame.ClipsDescendants = true
    window.mainFrame.Parent = window.screenGui
    
    -- Background image
    local backgroundImage = Instance.new("ImageLabel")
    backgroundImage.Name = "BackgroundImage"
    backgroundImage.Size = UDim2.fromScale(1, 1)
    backgroundImage.Position = UDim2.fromScale(0.5, 0.5)
    backgroundImage.AnchorPoint = Vector2.new(0.5, 0.5)
    backgroundImage.Image = config.BackgroundImage
    backgroundImage.ImageTransparency = config.BackgroundTransparency
    backgroundImage.ScaleType = Enum.ScaleType.Crop
    backgroundImage.BackgroundTransparency = 1
    backgroundImage.ZIndex = 0
    backgroundImage.Parent = window.mainFrame
    
    -- Corner rounding
    local corner = Instance.new("UICorner")
    corner.CornerRadius = config.CornerRadius
    corner.Parent = window.mainFrame
    
    -- Stroke
    local stroke = Instance.new("UIStroke")
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Color = config.AccentColor
    stroke.Thickness = config.StrokeThickness
    stroke.Parent = window.mainFrame
    
    -- Title bar
    window.titleBar = Instance.new("Frame")
    window.titleBar.Name = "TitleBar"
    window.titleBar.Size = UDim2.new(1, 0, 0, 40)
    window.titleBar.BackgroundColor3 = config.MainColor
    window.titleBar.BackgroundTransparency = 0.3
    window.titleBar.BorderSizePixel = 0
    window.titleBar.ZIndex = 2
    window.titleBar.Parent = window.mainFrame
    
    local titleBarCorner = Instance.new("UICorner")
    titleBarCorner.CornerRadius = UDim.new(0, 8)
    titleBarCorner.Parent = window.titleBar
    
    -- Title icon
    local titleIcon = Instance.new("ImageLabel")
    titleIcon.Name = "TitleIcon"
    titleIcon.Size = UDim2.fromOffset(30, 30)
    titleIcon.Position = UDim2.fromOffset(10, 5)
    titleIcon.Image = config.ToggleIcon
    titleIcon.BackgroundTransparency = 1
    titleIcon.ZIndex = 3
    titleIcon.Parent = window.titleBar
    
    -- Title text
    local titleText = Instance.new("TextLabel")
    titleText.Name = "TitleText"
    titleText.Size = UDim2.new(1, -50, 1, 0)
    titleText.Position = UDim2.fromOffset(50, 0)
    titleText.Text = window.title
    titleText.TextColor3 = config.TextColor
    titleText.TextSize = 18
    titleText.Font = Enum.Font.GothamBold
    titleText.BackgroundTransparency = 1
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.ZIndex = 3
    titleText.Parent = window.titleBar
    
    -- Tab container
    window.tabContainer = Instance.new("Frame")
    window.tabContainer.Name = "TabContainer"
    window.tabContainer.Size = UDim2.new(0.2, 0, 1, -40)
    window.tabContainer.Position = UDim2.fromOffset(0, 40)
    window.tabContainer.BackgroundColor3 = config.SecondaryColor
    window.tabContainer.BackgroundTransparency = 0.5
    window.tabContainer.BorderSizePixel = 0
    window.tabContainer.ZIndex = 2
    window.tabContainer.Parent = window.mainFrame
    
    local tabContainerCorner = Instance.new("UICorner")
    tabContainerCorner.CornerRadius = UDim.new(0, 8)
    tabContainerCorner.Parent = window.tabContainer
    
    -- Content container
    window.contentContainer = Instance.new("Frame")
    window.contentContainer.Name = "ContentContainer"
    window.contentContainer.Size = UDim2.new(0.8, 0, 1, -40)
    window.contentContainer.Position = UDim2.fromOffset(window.tabContainer.Size.X.Offset, 40)
    window.contentContainer.BackgroundTransparency = 1
    window.contentContainer.BorderSizePixel = 0
    window.contentContainer.ZIndex = 2
    window.contentContainer.Parent = window.mainFrame
    
    -- Scrolling frame for tabs
    window.tabScrolling = Instance.new("ScrollingFrame")
    window.tabScrolling.Name = "TabScrolling"
    window.tabScrolling.Size = UDim2.new(1, 0, 1, 0)
    window.tabScrolling.BackgroundTransparency = 1
    window.tabScrolling.BorderSizePixel = 0
    window.tabScrolling.ScrollBarThickness = 4
    window.tabScrolling.ScrollBarImageColor3 = config.AccentColor
    window.tabScrolling.CanvasSize = UDim2.new(0, 0, 0, 0)
    window.tabScrolling.AutomaticCanvasSize = Enum.AutomaticSize.Y
    window.tabScrolling.Parent = window.tabContainer
    
    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.Name = "TabListLayout"
    tabListLayout.Padding = UDim.new(0, 5)
    tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabListLayout.Parent = window.tabScrolling
    
    -- Create toggle button (semi-circle on left side)
    window.toggleButton = Instance.new("ImageButton")
    window.toggleButton.Name = "ToggleButton"
    window.toggleButton.Size = UDim2.fromOffset(40, 40)
    window.toggleButton.Position = UDim2.new(0, -20, 0.5, 0)
    window.toggleButton.AnchorPoint = Vector2.new(0, 0.5)
    window.toggleButton.Image = config.ToggleIcon
    window.toggleButton.BackgroundColor3 = config.MainColor
    window.toggleButton.BackgroundTransparency = 0.3
    window.toggleButton.ZIndex = 10
    window.toggleButton.Parent = window.screenGui
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = window.toggleButton
    
    local toggleStroke = Instance.new("UIStroke")
    toggleStroke.Color = config.AccentColor
    toggleStroke.Thickness = config.StrokeThickness
    toggleStroke.Parent = window.toggleButton
    
    -- Toggle button animation
    window.toggleButton.MouseEnter:Connect(function()
        tween(window.toggleButton, {Position = UDim2.new(0, 0, 0.5, 0)}, 0.2)
    end)
    
    window.toggleButton.MouseLeave:Connect(function()
        if window.visible then
            tween(window.toggleButton, {Position = UDim2.new(0, -20, 0.5, 0)}, 0.2)
        end
    end)
    
    -- Toggle visibility
    window.toggleButton.MouseButton1Click:Connect(function()
        window.visible = not window.visible
        if window.visible then
            tween(window.mainFrame, {Size = window.size}, config.AnimationSpeed)
            tween(window.toggleButton, {Position = UDim2.new(0, -20, 0.5, 0)}, 0.2)
        else
            tween(window.mainFrame, {Size = UDim2.fromOffset(0, window.size.Y.Offset)}, config.AnimationSpeed)
            tween(window.toggleButton, {Position = UDim2.new(0, 0, 0.5, 0)}, 0.2)
        end
    end)
    
    -- Make window draggable
    local dragging = false
    local dragInput, dragStart, startPos
    
    window.titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = window.mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    window.titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            window.mainFrame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    return window
end

-- Create a new tab
function BloodUI:Tab(options)
    local tab = {}
    tab.title = options.Title or "Tab"
    tab.icon = options.Icon or ""
    tab.window = self
    tab.buttons = {}
    
    -- Tab button
    tab.button = Instance.new("TextButton")
    tab.button.Name = "TabButton_" .. tab.title
    tab.button.Size = UDim2.new(1, -10, 0, 40)
    tab.button.Position = UDim2.fromOffset(5, 5 + (#self.tabs * 45))
    tab.button.Text = tab.title
    tab.button.TextColor3 = config.TextColor
    tab.button.TextSize = 14
    tab.button.Font = Enum.Font.GothamBold
    tab.button.BackgroundColor3 = config.MainColor
    tab.button.BackgroundTransparency = 0.7
    tab.button.AutoButtonColor = false
    tab.button.ZIndex = 3
    tab.button.Parent = self.tabScrolling
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = config.CornerRadius
    buttonCorner.Parent = tab.button
    
    local buttonStroke = Instance.new("UIStroke")
    buttonStroke.Color = config.AccentColor
    buttonStroke.Thickness = 1
    buttonStroke.Parent = tab.button
    
    -- Tab content frame
    tab.contentFrame = Instance.new("ScrollingFrame")
    tab.contentFrame.Name = "TabContent_" .. tab.title
    tab.contentFrame.Size = UDim2.new(1, 0, 1, 0)
    tab.contentFrame.BackgroundTransparency = 1
    tab.contentFrame.BorderSizePixel = 0
    tab.contentFrame.ScrollBarThickness = 4
    tab.contentFrame.ScrollBarImageColor3 = config.AccentColor
    tab.contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    tab.contentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tab.contentFrame.Visible = false
    tab.contentFrame.ZIndex = 2
    tab.contentFrame.Parent = self.contentContainer
    
    local contentListLayout = Instance.new("UIListLayout")
    contentListLayout.Name = "ContentListLayout"
    contentListLayout.Padding = UDim.new(0, 10)
    contentListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentListLayout.Parent = tab.contentFrame
    
    -- Tab selection logic
    tab.button.MouseButton1Click:Connect(function()
        self:SelectTab(tab)
    end)
    
    -- Add to window tabs
    table.insert(self.tabs, tab)
    
    -- Select first tab by default
    if #self.tabs == 1 then
        self:SelectTab(tab)
    end
    
    return tab
end

-- Select a tab
function BloodUI:SelectTab(tab)
    if self.currentTab then
        self.currentTab.contentFrame.Visible = false
        tween(self.currentTab.button, {BackgroundTransparency = 0.7}, 0.2)
    end
    
    self.currentTab = tab
    tab.contentFrame.Visible = true
    tween(tab.button, {BackgroundTransparency = 0.3}, 0.2)
end

-- Create a section in a tab
function tab:Section(options)
    local section = {}
    section.title = options.Title or "Section"
    
    -- Section frame
    section.frame = Instance.new("Frame")
    section.frame.Name = "Section_" .. section.title
    section.frame.Size = UDim2.new(1, -20, 0, 30)
    section.frame.Position = UDim2.fromOffset(10, 10 + (#self.buttons * 40))
    section.frame.BackgroundTransparency = 1
    section.frame.BorderSizePixel = 0
    section.frame.ZIndex = 3
    section.frame.Parent = self.contentFrame
    
    -- Section title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 20)
    title.Text = section.title
    title.TextColor3 = config.TextColor
    title.TextSize = 16
    title.Font = Enum.Font.GothamBold
    title.BackgroundTransparency = 1
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.ZIndex = 3
    title.Parent = section.frame
    
    -- Divider line
    local divider = Instance.new("Frame")
    divider.Name = "Divider"
    divider.Size = UDim2.new(1, 0, 0, 2)
    divider.Position = UDim2.fromOffset(0, 25)
    divider.BackgroundColor3 = config.AccentColor
    divider.BackgroundTransparency = 0.5
    divider.BorderSizePixel = 0
    divider.ZIndex = 3
    divider.Parent = section.frame
    
    table.insert(self.buttons, section)
    return section
end

-- Create a toggle button
function tab:Toggle(options)
    local toggle = {}
    toggle.title = options.Title or "Toggle"
    toggle.value = options.Value or false
    toggle.callback = options.Callback or function() end
    
    -- Toggle frame
    toggle.frame = Instance.new("Frame")
    toggle.frame.Name = "Toggle_" .. toggle.title
    toggle.frame.Size = UDim2.new(1, -20, 0, 30)
    toggle.frame.Position = UDim2.fromOffset(10, 10 + (#self.buttons * 40))
    toggle.frame.BackgroundColor3 = config.SecondaryColor
    toggle.frame.BackgroundTransparency = 0.8
    toggle.frame.BorderSizePixel = 0
    toggle.frame.ZIndex = 3
    toggle.frame.Parent = self.contentFrame
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = config.CornerRadius
    frameCorner.Parent = toggle.frame
    
    -- Toggle title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(0.7, 0, 1, 0)
    title.Text = toggle.title
    title.TextColor3 = config.TextColor
    title.TextSize = 14
    title.Font = Enum.Font.Gotham
    title.BackgroundTransparency = 1
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.ZIndex = 4
    title.Parent = toggle.frame
    
    -- Toggle switch
    local switch = Instance.new("Frame")
    switch.Name = "Switch"
    switch.Size = UDim2.fromOffset(40, 20)
    switch.Position = UDim2.new(0.85, 0, 0.5, 0)
    switch.AnchorPoint = Vector2.new(0.85, 0.5)
    switch.BackgroundColor3 = config.MainColor
    switch.BackgroundTransparency = 0.5
    switch.BorderSizePixel = 0
    switch.ZIndex = 4
    switch.Parent = toggle.frame
    
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(1, 0)
    switchCorner.Parent = switch
    
    local toggleDot = Instance.new("Frame")
    toggleDot.Name = "Dot"
    toggleDot.Size = UDim2.fromOffset(16, 16)
    toggleDot.Position = UDim2.fromScale(0.1, 0.5)
    toggleDot.AnchorPoint = Vector2.new(0, 0.5)
    toggleDot.BackgroundColor3 = config.AccentColor
    toggleDot.BorderSizePixel = 0
    toggleDot.ZIndex = 5
    toggleDot.Parent = switch
    
    local dotCorner = Instance.new("UICorner")
    dotCorner.CornerRadius = UDim.new(1, 0)
    dotCorner.Parent = toggleDot
    
    -- Update toggle state
    local function updateState()
        if toggle.value then
            tween(toggleDot, {Position = UDim2.fromScale(0.9, 0.5), AnchorPoint = Vector2.new(1, 0.5)}, 0.2)
            tween(switch, {BackgroundColor3 = config.AccentColor, BackgroundTransparency = 0.3}, 0.2)
        else
            tween(toggleDot, {Position = UDim2.fromScale(0.1, 0.5), AnchorPoint = Vector2.new(0, 0.5)}, 0.2)
            tween(switch, {BackgroundColor3 = config.MainColor, BackgroundTransparency = 0.5}, 0.2)
        end
    end
    
    updateState()
    
    -- Toggle click
    toggle.frame.MouseButton1Click:Connect(function()
        toggle.value = not toggle.value
        updateState()
        toggle.callback(toggle.value)
    end)
    
    table.insert(self.buttons, toggle)
    return toggle
end

-- Create a button
function tab:Button(options)
    local button = {}
    button.title = options.Title or "Button"
    button.callback = options.Callback or function() end
    
    -- Button frame
    button.frame = Instance.new("TextButton")
    button.frame.Name = "Button_" .. button.title
    button.frame.Size = UDim2.new(1, -20, 0, 30)
    button.frame.Position = UDim2.fromOffset(10, 10 + (#self.buttons * 40))
    button.frame.Text = button.title
    button.frame.TextColor3 = config.TextColor
    button.frame.TextSize = 14
    button.frame.Font = Enum.Font.GothamBold
    button.frame.BackgroundColor3 = config.MainColor
    button.frame.BackgroundTransparency = 0.7
    button.frame.AutoButtonColor = false
    button.frame.BorderSizePixel = 0
    button.frame.ZIndex = 3
    button.frame.Parent = self.contentFrame
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = config.CornerRadius
    frameCorner.Parent = button.frame
    
    local frameStroke = Instance.new("UIStroke")
    frameStroke.Color = config.AccentColor
    frameStroke.Thickness = 1
    frameStroke.Parent = button.frame
    
    -- Button hover effects
    button.frame.MouseEnter:Connect(function()
        tween(button.frame, {BackgroundTransparency = 0.5}, 0.2)
    end)
    
    button.frame.MouseLeave:Connect(function()
        tween(button.frame, {BackgroundTransparency = 0.7}, 0.2)
    end)
    
    -- Button click
    button.frame.MouseButton1Click:Connect(function()
        tween(button.frame, {Size = UDim2.new(0.95, -20, 0, 28)}, 0.1)
        tween(button.frame, {Size = UDim2.new(1, -20, 0, 30)}, 0.1, nil, nil, function()
            button.callback()
        end)
    end)
    
    table.insert(self.buttons, button)
    return button
end

-- Create a dropdown
function tab:Dropdown(options)
    local dropdown = {}
    dropdown.title = options.Title or "Dropdown"
    dropdown.values = options.Values or {}
    dropdown.callback = options.Callback or function() end
    dropdown.open = false
    
    -- Dropdown frame
    dropdown.frame = Instance.new("Frame")
    dropdown.frame.Name = "Dropdown_" .. dropdown.title
    dropdown.frame.Size = UDim2.new(1, -20, 0, 30)
    dropdown.frame.Position = UDim2.fromOffset(10, 10 + (#self.buttons * 40))
    dropdown.frame.BackgroundColor3 = config.SecondaryColor
    dropdown.frame.BackgroundTransparency = 0.8
    dropdown.frame.BorderSizePixel = 0
    dropdown.frame.ZIndex = 3
    dropdown.frame.ClipsDescendants = true
    dropdown.frame.Parent = self.contentFrame
    
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = config.CornerRadius
    frameCorner.Parent = dropdown.frame
    
    -- Dropdown title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(0.7, 0, 0, 30)
    title.Text = dropdown.title
    title.TextColor3 = config.TextColor
    title.TextSize = 14
    title.Font = Enum.Font.Gotham
    title.BackgroundTransparency = 1
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.ZIndex = 4
    title.Parent = dropdown.frame
    
    -- Dropdown arrow
    local arrow = Instance.new("ImageLabel")
    arrow.Name = "Arrow"
    arrow.Size = UDim2.fromOffset(20, 20)
    arrow.Position = UDim2.new(0.9, 0, 0.5, 0)
    arrow.AnchorPoint = Vector2.new(0.9, 0.5)
    arrow.Image = "rbxassetid://6031090990" -- Down arrow icon
    arrow.BackgroundTransparency = 1
    arrow.ZIndex = 4
    arrow.Parent = dropdown.frame
    
    -- Dropdown options frame
    dropdown.optionsFrame = Instance.new("Frame")
    dropdown.optionsFrame.Name = "Options"
    dropdown.optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    dropdown.optionsFrame.Position = UDim2.fromOffset(0, 30)
    dropdown.optionsFrame.BackgroundColor3 = config.MainColor
    dropdown.optionsFrame.BackgroundTransparency = 0.9
    dropdown.optionsFrame.BorderSizePixel = 0
    dropdown.optionsFrame.ZIndex = 5
    dropdown.optionsFrame.Parent = dropdown.frame
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = config.CornerRadius
    optionsCorner.Parent = dropdown.optionsFrame
    
    local optionsList = Instance.new("UIListLayout")
    optionsList.Name = "OptionsList"
    optionsList.Padding = UDim.new(0, 2)
    optionsList.SortOrder = Enum.SortOrder.LayoutOrder
    optionsList.Parent = dropdown.optionsFrame
    
    -- Create options
    for i, value in ipairs(dropdown.values) do
        local option = Instance.new("TextButton")
        option.Name = "Option_" .. value
        option.Size = UDim2.new(1, 0, 0, 25)
        option.Text = value
        option.TextColor3 = config.TextColor
        option.TextSize = 12
        option.Font = Enum.Font.Gotham
        option.BackgroundTransparency = 1
        option.AutoButtonColor = false
        option.ZIndex = 6
        option.Parent = dropdown.optionsFrame
        
        option.MouseEnter:Connect(function()
            tween(option, {BackgroundTransparency = 0.8}, 0.2)
        end)
        
        option.MouseLeave:Connect(function()
            tween(option, {BackgroundTransparency = 1}, 0.2)
        end)
        
        option.MouseButton1Click:Connect(function()
            dropdown.callback(value)
            dropdown:Toggle()
        end)
    end
    
    -- Toggle dropdown
    function dropdown:Toggle()
        dropdown.open = not dropdown.open
        
        if dropdown.open then
            dropdown.optionsFrame.Size = UDim2.new(1, 0, 0, #dropdown.values * 27)
            tween(arrow, {Rotation = 180}, 0.2)
            tween(dropdown.frame, {Size = UDim2.new(1, -20, 0, 30 + #dropdown.values * 27)}, 0.2)
        else
            dropdown.optionsFrame.Size = UDim2.new(1, 0, 0, 0)
            tween(arrow, {Rotation = 0}, 0.2)
            tween(dropdown.frame, {Size = UDim2.new(1, -20, 0, 30)}, 0.2)
        end
    end
    
    -- Dropdown click
    dropdown.frame.MouseButton1Click:Connect(function()
        dropdown:Toggle()
    end)
    
    table.insert(self.buttons, dropdown)
    return dropdown
end

return BloodUI